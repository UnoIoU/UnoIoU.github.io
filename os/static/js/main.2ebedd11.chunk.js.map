{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pubkey","zippwd","rsatool","title","url","snackBarOpen","snackBarMsg","handleRSACopy","bind","assertThisInitialized","handleZipClick","copy","setState","react_default","a","createElement","className","style","textAlign","paddingLeft","paddingRight","marginTop","TextField_default","id","label","margin","maxWidth","minWidth","variant","InputLabelProps","shrink","value","multiline","disabled","Button_default","color","target","href","Divider_default","onClick","Date","getFullYear","Snackbar_default","key","anchorOrigin","vertical","horizontal","open","autoHideDuration","ContentProps","aria-describedby","message","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ebedd11.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport copy from 'copy-to-clipboard';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pubkey: `-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCZiNapEDh6hgeM0qz8ryOwt2Rf\nYoPTh0sX6v9+fGq8Kodmh16JpXqg7/B1beOlL27KVPCLm+60h3KnM9TXyILb3/k+\njOwqcE25n4kK+4TTb1GaUre0MqeR8xalv1WKASYGJ000bX/jPs6z2z80l0lcRBlW\npZ6ME6Tpmy1Vc10GaQIDAQAB\n-----END PUBLIC KEY-----`,\n      zippwd: 'chenmin2019.com',\n      rsatool: 'https://8gwifi.org',\n      title: '第三次作业',\n      url: 'https://www.wjx.top/jq/37264048.aspx',\n      snackBarOpen: false,\n      snackBarMsg: '',\n    };\n\n    this.handleRSACopy = this.handleRSACopy.bind(this);\n    this.handleZipClick = this.handleZipClick.bind(this);\n  }\n\n  handleRSACopy() {\n    copy(this.state.pubkey);\n    this.setState((state) => ({\n      snackBarOpen: true,\n      snackBarMsg: '公钥已复制',\n    }));\n  }\n\n  handleZipClick() {\n    copy(this.state.zippwd);\n    this.setState((state) => ({\n      snackBarOpen: true,\n      snackBarMsg: '压缩密码已复制',\n    }));\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <h3>{'计算机操作系统' + this.state.title}</h3>\n\n        <h5>\n          说明：在下方提交作业的网址中使用{' '}\n          <span>公钥、压缩包密码、在线 RSA 加密工具</span>。\n        </h5>\n        <div\n          style={{\n            textAlign: 'left',\n            paddingLeft: '30px',\n            paddingRight: '30px',\n            marginTop: '20px',\n          }}\n        >\n          <TextField\n            id='outlined-full-width'\n            label={this.state.title + '网址'}\n            style={{ margin: 8, maxWidth: 400, minWidth: 350 }}\n            margin='normal'\n            variant='outlined'\n            InputLabelProps={{\n              shrink: true,\n            }}\n            value={this.state.url}\n            multiline\n            disabled\n          />\n          <Button\n            variant='contained'\n            color='primary'\n            target='_blank'\n            href={this.state.url}\n          >\n            在新的标签页中打开\n          </Button>\n          <Divider style={{ margin: '20px 0 20px 0' }} />\n\n          <TextField\n            id='outlined-full-width'\n            label='公钥 (RSA)'\n            style={{ margin: 8, maxWidth: 400, minWidth: 350 }}\n            margin='normal'\n            variant='outlined'\n            InputLabelProps={{\n              shrink: true,\n            }}\n            value={this.state.pubkey}\n            multiline\n            disabled\n          />\n          <Button\n            variant='contained'\n            color='primary'\n            onClick={this.handleRSACopy}\n          >\n            复制到剪贴板\n          </Button>\n          <Divider style={{ margin: '20px 0 20px 0' }} />\n          <TextField\n            id='outlined-full-width'\n            label='压缩包密码'\n            style={{ margin: 8, maxWidth: 400, minWidth: 350 }}\n            margin='normal'\n            variant='outlined'\n            InputLabelProps={{\n              shrink: true,\n            }}\n            value={this.state.zippwd}\n            multiline\n            disabled\n          />\n          <Button\n            variant='contained'\n            color='primary'\n            onClick={this.handleZipClick}\n          >\n            复制到剪贴板\n          </Button>\n          <Divider style={{ margin: '20px 0 20px 0' }} />\n          <TextField\n            id='outlined-full-width'\n            label='在线 RSA 加密工具'\n            style={{ margin: 8, maxWidth: 400, minWidth: 350 }}\n            margin='normal'\n            variant='outlined'\n            InputLabelProps={{\n              shrink: true,\n            }}\n            value={\n              this.state.rsatool + '\\n\\n点击右侧的 RSA Encryption/Decryption'\n            }\n            multiline\n            disabled\n          />\n          <Button\n            variant='contained'\n            target='_blank'\n            color='primary'\n            href={this.state.rsatool}\n          >\n            在新的标签页中打开\n          </Button>\n          <p style={{ textAlign: 'center' }}>\n            &copy; {new Date().getFullYear()} papers.ink\n          </p>\n        </div>\n\n        <Snackbar\n          key={this.state.snackBarMsg}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center',\n          }}\n          open={this.state.snackBarOpen}\n          autoHideDuration={6000}\n          ContentProps={{\n            'aria-describedby': 'message-id',\n          }}\n          message={this.state.snackBarMsg}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}